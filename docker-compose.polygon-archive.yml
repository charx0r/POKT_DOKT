version: '3.1'

services:

  traefik:
    image: traefik:latest
    container_name: traefik
    restart: always
    ports:
      - "443:443"
      - "127.0.0.1:8080:8080"
    command:
      - "--api=true"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--entryPoints.metrics.address=:8082"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      # TESTING
      # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=$MAIL"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    volumes:
      - "./traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - chains
    labels:
      - "traefik.enable=true"

  rabbitmq:
    container_name: rabbitmq
    image: "rabbitmq:3-alpine"
    ports:
      - "5672"
    restart: unless-stopped
  heimdalld:
    build: &ref_0
      args:
        UPSTREAM_VERSION: v0.2.5
      context: ./polygon/heimdall
      dockerfile: Dockerfile
    volumes:
      - "heimdall_data:/root/.heimdalld"
    ports:
      - "26656:26656"
      - "127.0.0.1:26657:26657"
    depends_on:
      - rabbitmq
      - heimdall-geth
    environment:
      - MONIKER=StakeSquid
      - SNAPSHOT_URL=https://matic-blockchain-snapshots.s3-accelerate.amazonaws.com/matic-mainnet/heimdall-snapshot-2021-11-29.tar.gz
      - BOOTSTRAP=0
      - "ETH1_RPC_URL=http://heimdall-geth:8545/"
      #- "ETH1_RPC_URL=https://mainnet.infura.io/v3/7fdd73988ee54ca1942566b8d55a69e8"
    restart: unless-stopped
    networks:
      - chains

  heimdallr:
    environment:
      - REST_SERVER=1
      #- "ETH1_RPC_URL=https://mainnet.infura.io/v3/7fdd73988ee54ca1942566b8d55a69e8"
      - "ETH1_RPC_URL=http://heimdall-geth:8545/"
    build: *ref_0
    volumes:
      - "heimdall_data:/root/.heimdalld"
    ports:
      - "1317"
    depends_on:
      - heimdalld
      - heimdall-geth
    restart: unless-stopped
    networks:
      - chains

  bor:
    build:
      args:
        UPSTREAM_VERSION: v0.2.14
      context: ./polygon/bor
      dockerfile: Dockerfile
    environment:
      - SNAPSHOT_URL=https://matic-blockchain-snapshots.s3-accelerate.amazonaws.com/matic-mainnet/bor-pruned-snapshot-2021-11-28.tar.gz
      - BOOTSTRAP=0
    volumes:
      - "bor-archive_data:/datadir"
    ports:
      - "127.0.0.1:8545:8545"
      - "127.0.0.1:8546:8546"
      - "40303:40303"
      - "40303:40303/udp"
    depends_on:
      - heimdallr
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.ipwhitelist.ipwhitelist.sourcerange=$WHITELIST"
      - "traefik.http.middlewares.bor-archive-stripprefix.stripprefix.prefixes=/polygon-archive"
      - "traefik.http.services.bor-archive.loadbalancer.server.port=8545"
      - "traefik.http.routers.bor-archive.entrypoints=websecure"
      - "traefik.http.routers.bor-archive.tls.certresolver=myresolver"
      - "traefik.http.routers.bor-archive.rule=Host(`$DOMAIN`) && PathPrefix(`/polygon-archive`)"
      - "traefik.http.routers.bor-archive.middlewares=bor-archive-stripprefix, ipwhitelist"
    networks:
      - chains


  heimdall-geth:
    image: ethereum/client-go:stable
    expose:
      # HTTP server / GraphQL API
      - 8545
    command:
      [
        # Blockchain sync mode ("snap", "full" or "light")
        "--syncmode=light",
        # Megabytes of memory allocated to internal caching
        "--cache=8192",
        # Enable the WS-RPC server
        "--ws",
        "--ws.addr=0.0.0.0",
        # Enable the HTTP-RPC server
        "--http",
        "--http.addr=0.0.0.0",
        "--http.vhosts=*",
        # Enable GraphQL on the HTTP-RPC server. Note that GraphQL can only be started if an HTTP server is started as well.
        "--graphql",
        "--graphql.vhosts=*",
        # Enable metrics collection and reporting
        "--metrics",
        # Ethereum mainnet
        "--mainnet",
        # Maximum number of network peers (network disabled if set to 0) (default: 50)
        "--maxpeers=30"
      ]
    networks:
      - chains
      
### WIREGUARD

  wireguard:
    image: lscr.io/linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./wireguard/config/wg0.conf:/config/wg0.conf
      - /lib/modules:/lib/modules
    # Expose prometheus port
    expose:
      - 9090
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped


### MONITORING

  prometheus:
    image: prom/prometheus:v2.30.3
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus-harmony.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    network_mode: "service:wireguard"
    labels:
      org.label-schema.group: "monitoring"
    depends_on:
      - wireguard

  nodeexporter:
    image: prom/node-exporter:v1.2.2
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.42.0
    container_name: cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    labels:
      org.label-schema.group: "monitoring"

### VOLUMES

volumes:
  bor-archive_data:
  heimdall_data:
  geth-mainnet_data:
  prometheus_data:

networks:
  chains:
    driver: bridge
    ipam:
     config:
       - subnet: 192.168.0.1/27